"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const date_fns_1 = require("date-fns");
/**
 * Month related functions
 */
const months = {
    years: (unit) => unit * 12,
    quarters: (unit) => unit * 3,
    months: (unit) => unit,
};
/**
 * Days related functions
 */
const days = {
    weeks: (unit) => unit * 7,
    days: (unit) => unit,
};
/**
 * Milliseconds related functions
 */
const milliseconds = {
    hours: (unit) => unit * 3600000,
    minutes: (unit) => unit * 60000,
    seconds: (unit) => unit * 1000,
    milliseconds: (unit) => unit,
};
/**
 * The job of this method is to ensure that we pull less dependencies from
 * date-fns.
 */
exports.calcUnits = (diffUnit, key, operator) => {
    if (months[key]) {
        return date_fns_1.addMonths(new Date(), operator === '-' ? -months[key](diffUnit) : months[key](diffUnit));
    }
    if (days[key]) {
        return date_fns_1.addDays(new Date(), operator === '-' ? -days[key](diffUnit) : days[key](diffUnit));
    }
    if (milliseconds[key]) {
        return date_fns_1.addMilliseconds(new Date(), operator === '-' ? -milliseconds[key](diffUnit) : milliseconds[key](diffUnit));
    }
    throw new Error(`Invalid time calculation key ${key}`);
};
/**
 * An array of keys allowed for comparing date offset
 */
exports.dateOffsetKeys = [
    'years',
    'quarters',
    'months',
    'weeks',
    'days',
    'hours',
    'minutes',
    'seconds',
    'milliseconds',
];
