"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
const MISSING_VALUES = 'range:make sure to define min and max values';
const INVALID_TYPE = 'range:min and max values must be defined as integers';
/**
 * Enforces the field value to be under a given range.
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   age: 'integer|range:16,60'
 * }
 *
 * // or
 * const rules = {
 *   age: [
 *     validations.integer(),
 *     validations.range([16, 60])
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    compile(args) {
        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);
        const min = indicative_utils_1.cast(args[0], 'float', INVALID_TYPE);
        const max = indicative_utils_1.cast(args[1], 'float', INVALID_TYPE);
        return [min, max];
    },
    validate: (data, field, [min, max], config) => {
        const fieldValue = indicative_utils_1.getValue(data, field);
        return indicative_utils_1.skippable(fieldValue, field, config) || ((fieldValue >= min) && (fieldValue <= max));
    },
};
exports.default = validation;
