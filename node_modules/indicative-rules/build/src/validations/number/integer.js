"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
/**
 * Enforces the field value to be a valid integer. Validation will
 * fail for values with decimal points, you must use
 * `float` for that.
 *
 * [casts]
 *   [label from="string", to="integer"]
 * [/casts]
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   age: 'integer'
 * }
 *
 * // or
 * const rules = {
 *   age: [
 *     validations.integer()
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    validate: (data, field, _args, config) => {
        let fieldValue = indicative_utils_1.getValue(data, field);
        if (indicative_utils_1.skippable(fieldValue, field, config)) {
            return true;
        }
        /**
         * Ensure value is castable to number
         */
        const castedValue = indicative_utils_1.cast(fieldValue, 'integer');
        if (castedValue === null) {
            return false;
        }
        /**
         * Ensure that orignal input wasn't with decimals. Use `float` rule
         * to allow decimals
         */
        if (castedValue !== indicative_utils_1.cast(fieldValue, 'float')) {
            return false;
        }
        /**
         * Mutate field value
         */
        indicative_utils_1.patchValue(data, field, castedValue);
        return true;
    },
};
exports.default = validation;
