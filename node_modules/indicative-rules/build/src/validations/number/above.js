"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
const above_1 = require("../../raw/above");
const MISSING_VALUE = 'above:make sure to define minValue';
const INVALID_TYPE = 'above:min value must be defined as an integer';
/**
 * Enforces the field value to be above the defined value.
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   age: 'number|above:20'
 * }
 *
 * // or
 * const rules = {
 *   age: [
 *     validations.number(),
 *     validations.above([20])
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    compile(args) {
        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);
        const minValue = indicative_utils_1.cast(args[0], 'integer', INVALID_TYPE);
        return [minValue];
    },
    validate: (data, field, [minValue], config) => {
        const fieldValue = indicative_utils_1.getValue(data, field);
        return indicative_utils_1.skippable(fieldValue, field, config) || above_1.above(fieldValue, minValue);
    },
};
exports.default = validation;
