"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
const dateFormat_1 = require("../../raw/dateFormat");
const MISSING_VALUE = 'dateFormat:make sure to define atleast one date format';
/**
 * Ensures the date or date time is valid as the per the defined formats.
 *
 * This method will import [format](https://date-fns.org/v1.29.0/docs/format) method from dateFns.
 *
 * ### Note
 * Following steps are performed to strip the timezone from the actual date
 * and then format the date. Keeping timezones will result in different
 * output, even when the format is correct.
 *
 * 1. Timezone is only stripped when the date format expects timezone to
 *    be present.
 * 2. `Z` and `ZZ` identifiers replaces their expected counter parts.
 * 3. Also date can have `Z`, which is equivalent to `+00:00`.
 * 4. If we will not strip the timezone offset from the actual date, then
 *    dateFns will format it in local timezone causing invalid date
 *    comparison.
 * 5. Validation will also fail, when format expects a timezone but missing
 *    in original date.
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   publish_at: [
 *     validations.dateFormat(['YYYY-MM-DD HH:mm:ss'])
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    compile(args) {
        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);
        return args.map((arg) => String(arg));
    },
    validate: (data, field, args, config) => {
        const fieldValue = indicative_utils_1.getValue(data, field);
        return indicative_utils_1.skippable(fieldValue, field, config) || dateFormat_1.dateFormat(fieldValue, args);
    },
};
exports.default = validation;
