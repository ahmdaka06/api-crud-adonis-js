"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
const utils_1 = require("../../utils");
const beforeOffsetOf_1 = require("../../raw/beforeOffsetOf");
const MISSING_VALUES = 'beforeOffsetOf:make sure to define offset unit and key';
const INVALID_AFTER_KEY = 'beforeOffsetOf:2nd argument must be a valid calc key';
const INVALID_AFTER_UNIT = 'beforeOffsetOf:1st argument must be a number';
/**
 * Enforces the field value to be before a given time period offset.
 *
 * The `period` value has to be one of the following
 *
 * - years
 * - quarters
 * - months
 * - weeks
 * - days
 * - hours
 * - minutes
 * - seconds
 * - milliseconds
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   meetup: 'date|before_offset_of:4,months'
 * }
 *
 * // or
 * const rules = {
 *   meetup: [
 *     validations.date(),
 *     validations.beforeOffsetOf([4, 'months'])
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    compile(args) {
        indicative_utils_1.ensureLength(args, MISSING_VALUES, 2);
        const diffUnit = indicative_utils_1.cast(args[0], 'integer', INVALID_AFTER_UNIT);
        const key = args[1];
        if (!utils_1.dateOffsetKeys.includes(key)) {
            throw new Error(INVALID_AFTER_KEY);
        }
        return [Number(diffUnit), key];
    },
    validate: (data, field, [diffUnit, key], config) => {
        const fieldValue = indicative_utils_1.getValue(data, field);
        if (indicative_utils_1.skippable(fieldValue, field, config)) {
            return true;
        }
        if (!fieldValue) {
            return false;
        }
        return beforeOffsetOf_1.beforeOffsetOf(fieldValue, diffUnit, key);
    },
};
exports.default = validation;
