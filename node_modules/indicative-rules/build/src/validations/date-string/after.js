"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
const after_1 = require("../../raw/after");
const MISSING_VALUE = 'after:make sure to define the after date';
const INVALID_TYPE = 'after:after date must be defined as string or date object';
/**
 * Enforces the field value to be after the expected date.
 * This method uses [isAfter](https://date-fns.org/docs/isAfter) function of date-fns.
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   confCall: `date|after:${new Date()}`
 * }
 *
 * // or
 * const rules = {
 *   confCall: [
 *     validations.date(),
 *     validations.after([new Date()])
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    compile(args) {
        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);
        const afterDate = indicative_utils_1.cast(args[0], 'date', INVALID_TYPE);
        return [afterDate];
    },
    validate: (data, field, [comparisonDate], config) => {
        const fieldValue = indicative_utils_1.getValue(data, field);
        return indicative_utils_1.skippable(fieldValue, field, config) || after_1.after(fieldValue, comparisonDate);
    },
};
exports.default = validation;
