"use strict";
/*
* indicative-rules
*
* (c) Harminder Virk <virk@adonisjs.com>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const indicative_utils_1 = require("indicative-utils");
const subset_1 = require("../../raw/subset");
const isString_1 = require("../../raw/isString");
const MISSING_VALUE = 'subset:make sure to define subset collection';
/**
 * Enforces the value of a given field is a subset of expected values. The
 * field value must be an `array` or a `string` of comma seperated values.
 *
 * [casts]
 *   [label fromText="comma seperated string", from="string", to="array"]
 * [/casts]
 *
 * ```ts
 * import { validations } from 'indicative/validator'
 *
 * const rules = {
 *   sort_by: 'subset:email,id,name'
 * }
 *
 * // or
 * const rules = {
 *   sort_by: [
 *     validations.subset(['email', 'id', 'name'])
 *   ]
 * }
 * ```
 */
const validation = {
    async: false,
    compile(args) {
        indicative_utils_1.ensureLength(args, MISSING_VALUE, 1);
        return args.map((arg) => indicative_utils_1.cast(arg, 'string'));
    },
    validate: (data, field, args, config) => {
        let fieldValue = indicative_utils_1.getValue(data, field);
        if (indicative_utils_1.skippable(fieldValue, field, config)) {
            return true;
        }
        /**
         * Convert to array if value is a string
         */
        if (isString_1.isString(fieldValue)) {
            fieldValue = fieldValue.split(',').map((val) => val.trim());
        }
        else if (Array.isArray(fieldValue)) {
            fieldValue = fieldValue.map((value) => indicative_utils_1.cast(value, 'string'));
        }
        else {
            return false;
        }
        if (!subset_1.subset(fieldValue, args)) {
            return false;
        }
        /**
         * Mutate data field
         */
        indicative_utils_1.patchValue(data, field, fieldValue);
        return true;
    },
};
exports.default = validation;
